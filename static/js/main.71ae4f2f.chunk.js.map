{"version":3,"sources":["pages/HomePage.js","pages/UserPage.js","components/SnakeGrid.js","utils/helper.js","components/SnakeCard.js","components/ErrorDiv.js","pages/SnakeHome.js","index.js","App.js"],"names":["HomePage","className","to","UserPage","props","useState","user","loading","setUser","useEffect","a","axios","match","params","id","data","getUser","name","location","href","blog","followers","SnakeGrid","height","positions","squareSize","fieldStyle","width","style","map","elem","x","y","position","left","top","key","mod","n","m","initialState","val","windowSize","directions","getInitialState","JSON","parse","stringify","SnakeCard","relocate","oldpos","state","step","limit","forEach","pos","last","newDirections","dir","push","positionsCountMap","reduce","acc","iposArr","Object","values","some","posCount","setState","setVal","k","updatePoint","updateHeadDirection","oldDir","handleKeyPress","event","preventDefault","dirToIndex","oppositeDirectionIndex","document","addEventListener","this","setInterval","Container","Row","Col","md","React","Component","ErrorDiv","message","bgcolor","color","autoString","App","xs","Jumbotron","fluid","Tabs","defaultActiveKey","Tab","eventKey","title","theme","label","disabled","render","exact","from","path","component","SnakeHome","querySelector"],"mappings":"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","file":"static/js/main.71ae4f2f.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function HomePage() {\n  return (\n    <div className=\"container\">\n      <h1>Home Page</h1>\n      <p>\n        <Link to=\"/taniarascia\">taniarascia</Link> on GitHub.\n      </p>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nexport default function UserPage(props) {\n  const initialUserState = {\n    user: {},\n    loading: true,\n  }\n\n  const [user, setUser] = useState(initialUserState)\n\n  useEffect(() => {\n    const getUser = async () => {\n      const { data } = await axios(`https://api.github.com/users/${props.match.params.id}`)\n\n      setUser(data)\n    }\n\n    getUser()\n  }, [])\n\n  return user.loading ? (\n    <div>Loading...</div>\n  ) : (\n    <div className=\"container\">\n      <h1>{props.match.params.id}</h1>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Location</th>\n            <th>Website</th>\n            <th>Followers</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{user.name}</td>\n            <td>{user.location}</td>\n            <td>\n              <a href={user.blog}>{user.blog}</a>\n            </td>\n            <td>{user.followers}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n","import React from 'react';\n\nconst SnakeGrid = (props) => {\n    const { height = 400, positions = [[100, 200]], squareSize = 10 } = props;\n\n    const fieldStyle = {\n        width: height,\n        height: height\n    };\n\n    const elementStyle = (x, y) => {\n        const ans = {\n            position: 'absolute',\n            left: x,\n            top: y,\n            width: squareSize,\n            height: squareSize\n        }\n        return ans;\n    }\n\n    return <div\n        style={fieldStyle}\n        className=\"bg-secondary\"\n    >\n        {\n            positions.map((elem, id) => {\n                return <div\n                    style={elementStyle(elem[0], elem[1])}\n                    className=\"bg-warning\"\n                    key={id}\n                />\n            })\n        }\n\n    </div>\n}\n\n\nexport default SnakeGrid\n","\nexport const mod = (n, m) =>  {\n    return ((n % m) + m) % m;\n}","\nimport React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport SnakeGrid from './SnakeGrid';\nimport { mod } from '../utils/helper';\n\nconst initialState = {\n    val: 'Press up / down / left / right to move',\n    windowSize: 400,\n    squareSize: 10,\n    positions: [[100, 200], [90, 200], [80, 200], [70, 200], [60, 200], [50, 200]],\n    directions: [1, 1, 1, 1, 1, 1, 1]\n};\n\nconst getInitialState = () => {\n    return JSON.parse(JSON.stringify(initialState));\n}\n\nclass SnakeCard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const { windowSize = 400 } = props;\n        this.state = { ...getInitialState(), windowSize };\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyPress);\n        setInterval(() => this.relocate(), 300);\n    }\n\n    relocate = () => {\n\n        // when updating single point based on its direction\n        // this.state.positions.forEach((pos, id) => {\n        //     this.updatePoint(this.state.directions[id], id);\n        // });\n\n        // for updating all points\n        // move points\n        const oldpos = [...this.state.positions];\n        const step = this.state.squareSize;\n        const limit = this.state.windowSize;\n        this.state.positions.forEach((pos, id) => {\n            //console.log(pos + ' ' + id);\n            switch (this.state.directions[id]) {\n                case 1:\n                    oldpos[id][0] = mod(oldpos[id][0] + step, limit);\n                    break;\n                case 2:\n                    oldpos[id][1] = mod(oldpos[id][1] + step, limit);\n                    break;\n                case 3:\n                    oldpos[id][0] = mod(oldpos[id][0] - step, limit);\n                    break;\n                case 4:\n                    oldpos[id][1] = mod(oldpos[id][1] - step, limit);\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        // shift direction to right by one step // keeping the first element as it is \n        // assumes this is a blocking thread and while this operation executes, all update head queries wait\n        let last = this.state.directions[0];\n        const newDirections = [last];\n        this.state.directions.forEach((dir, id) => {\n            if (id > 0) {\n                newDirections.push(last);\n                last = dir;\n            }\n        });\n\n        // if repeats found in position // snake ate itself\n        const positionsCountMap =\n            this.state.positions\n                .reduce((acc, iposArr) => ({\n                    ...acc,\n                    [iposArr]: (acc[iposArr] || 0) + 1\n                }), {});\n        const duplicateFound = Object.values(positionsCountMap).some(posCount => posCount > 1);\n\n        if (duplicateFound) {\n            this.setState({\n                ...getInitialState()\n            });\n        } else {\n            this.setState({\n                ...this.state,\n                positions: [...oldpos],\n                directions: [...newDirections]\n            });\n        }\n    }\n\n    setVal = (k) => {\n        this.setState({\n            val: k\n        });\n    }\n\n    updatePoint = (dir, id) => {\n        const oldpos = [...this.state.positions];\n        const step = this.state.squareSize;\n        const limit = this.state.windowSize;\n\n        switch (dir) {\n            case 1:\n                oldpos[id][0] = mod(oldpos[id][0] + step, limit);\n                break;\n            case 2:\n                oldpos[id][1] = mod(oldpos[id][1] + step, limit);\n                break;\n            case 3:\n                oldpos[id][0] = mod(oldpos[id][0] - step, limit);\n                break;\n            case 4:\n                oldpos[id][1] = mod(oldpos[id][1] - step, limit);\n                break;\n            default:\n                break;\n        }\n\n        this.setState({\n            ...this.state,\n            positions: [...oldpos]\n        });\n    }\n\n    updateHeadDirection = (dir) => {\n        const oldDir = [...this.state.directions];\n\n        oldDir[0] = dir;\n        this.setState({\n            ...this.state,\n            directions: [...oldDir]\n        });\n    }\n\n    handleKeyPress = (event) => {\n        event.preventDefault();\n\n        const dirToIndex = { \n            'ArrowUp': 4,\n            'ArrowDown' : 2,\n            'ArrowLeft': 3,\n            'ArrowRight': 1\n        };\n\n        // snake cant move back\n        const currentHeadDirection = this.state.directions[0];\n        let oppositeDirectionIndex = (currentHeadDirection + 2) % 4;\n        if(oppositeDirectionIndex === 0){\n            oppositeDirectionIndex = 4;\n        }\n        \n        if(dirToIndex[event.key] === oppositeDirectionIndex){\n            return;\n        }\n\n        // update head direction\n        switch (event.key) {\n            case 'ArrowUp':\n                this.setVal('up');\n                this.updateHeadDirection(dirToIndex[event.key]);\n                break;\n            case 'ArrowDown':\n                this.setVal('down');\n                this.updateHeadDirection(dirToIndex[event.key]);\n                break;\n            case 'ArrowLeft':\n                this.setVal('left');\n                this.updateHeadDirection(dirToIndex[event.key]);\n                break;\n            case 'ArrowRight':\n                this.setVal('right');\n                this.updateHeadDirection(dirToIndex[event.key]);\n                break;\n            default:\n                this.setVal('Press up / down / left / right to move');\n                break;\n        }\n    }\n\n\n\n    render() {\n        return (<Container className=\"mt-5\">\n            <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                    <p>\n                        This is just another snake game, move snake, eat to grow, dont eat yourself!\n                </p>\n                </Col>\n            </Row>\n            <Row className=\"justify-content-md-center\">\n                <Col md=\"auto pl-0\">\n                    {/* <h1>Here will be the snake game block</h1> */}\n                    <SnakeGrid\n                        height={this.state.windowSize}\n                        squareSize={this.state.squareSize}\n                        positions={this.state.positions}\n                    />\n                </Col>\n            </Row>\n            <Row className=\"justify-content-md-center\">\n                <Col md=\"auto\">\n                    {this.state.val}\n                </Col>\n                <Col md=\"auto\">\n                    {this.state.windowSize}\n                </Col>\n            </Row>\n        </Container>\n        );\n    }\n\n}\n\n\nexport default SnakeCard;","\nimport React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\n\nconst ErrorDiv = (props) => {\n    const { message, color } = props;\n    const bgcolor = color === 'red' ? 'bg-danger' : 'bg-warning';\n    const autoString = 'auto';\n    return <Container className=\"mt-5\" >\n        <Row className=\"justify-content-md-center \">\n            <Col md={autoString + ' ' + bgcolor}>\n                <h2>\n                    This section is under development!\n                </h2>\n            </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n            <Col md={autoString + ' ' + bgcolor}>\n                <p>\n                    {message}\n                </p>\n            </Col>\n        </Row>\n    </Container>\n}\n\n\nexport default ErrorDiv","import React from 'react'\n// import ThemedButton from '../components/ThemedButton'\nimport { Container, Row, Col, Jumbotron, Tabs, Tab } from 'react-bootstrap';\nimport SnakeCard from '../components/SnakeCard';\nimport ErrorDiv from '../components/ErrorDiv';\n\n\nexport default function App() {\n    return (\n        <Container className='mt-5'>\n            <Row>\n                <Col xs={12} >\n                    <Jumbotron fluid >\n                        <Container>\n                            <Row className=\"justify-content-md-center\">\n                                <Col md=\"auto\">\n                                    <h1>Just Another Snake Game</h1>\n                                </Col>\n                            </Row>\n                            <Row className=\"justify-content-md-center\">\n                                <Col md=\"auto\">\n                                    <p>\n                                        This is a simple hero unit, information banner about the snake game\n                                    </p>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </Jumbotron>\n                </Col>\n            </Row>\n            {/* <Row className=\"justify-content-md-center\">\n                <h1>Hieee lesspa=lay</h1>\n                <ThemedButton theme=\"danger\" label=\"Delete Item\"></ThemedButton>\n            </Row> */}\n            <Row className=\"justify-content-center\">\n                <Col>\n                    <Tabs defaultActiveKey=\"home\" id=\"uncontrolled-tab-example\" className=\"justify-content-center\">\n                        <Tab eventKey=\"home\" title=\"Home\">\n                            <SnakeCard theme=\"danger\" label=\"Delete Item\" />\n                        </Tab>\n                        <Tab eventKey=\"stats\" title=\"Stats\">\n                            <ErrorDiv message=\"Will show game stats once redux integrated.\" />\n                        </Tab>\n                        <Tab eventKey=\"other\" title=\"Other Info\" disabled>\n                            <ErrorDiv message=\"Section not available yet!\" />\n                        </Tab>\n                    </Tabs>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.querySelector('#root')\n)\n","import React from 'react'\nimport { Route, Switch, Redirect} from 'react-router-dom'\nimport HomePage from './pages/HomePage'\nimport UserPage from './pages/UserPage'\nimport SnakeHome from './pages/SnakeHome'\n\n\nexport default function App() {\n  return (\n    <Switch>\n      <Redirect exact from=\"/\" to=\"snake\" />\n      <Route path=\"/snake\" component={SnakeHome} />\n      <Route exact path=\"/home\" component={HomePage} />\n      <Route path=\"/:id\" component={UserPage} />\n    </Switch>\n  )\n}\n"],"sourceRoot":""}